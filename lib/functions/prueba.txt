class Producto {
  String codigo;
  String referencia;
  String nombre;
  double precio;
  num cantidad;
  String categoria;
  int stockDisponible;

  Producto({
    required this.codigo,
    this.referencia = '',
    required this.nombre,
    required this.precio,
    required this.cantidad,
    required this.categoria,
    this.stockDisponible = 0,
  });

  static Producto fromMap(Map<String, dynamic> map) {
    return Producto(
      codigo: map['codigo'] ?? '',
      referencia: map['referencia'] ?? '',
      nombre: map['nombre'] ?? '',
      precio: (map['precio'] ?? 0).toDouble(),
      cantidad: map['general'] ?? map['cantidad'] ?? 0,
      categoria: map['categoria'] ?? 'Sin categoría',
      stockDisponible: 0,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'codigo': codigo,
      'referencia': referencia,
      'nombre': nombre,
      'precio': precio,
      'cantidad': cantidad,
      'categoria': categoria,
    };
  }
}

class TotalInvScreen extends StatefulWidget {
  const TotalInvScreen({super.key});

  @override
  State<TotalInvScreen> createState() => _TotalInvScreenState();
}

class _TotalInvScreenState extends State<TotalInvScreen> {
  final TextEditingController _searchController = TextEditingController();
  String searchQuery = '';
  List<String> categorias = ['Todas'];
  String categoriaSeleccionada = 'Todas';
  int totalProductosFiltrados = 0;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<Map<String, int>> _cargarStockMultiplesProductos(
    List<String> codigos,
  ) async {
    Map<String, int> stockMap = {};

    for (String codigo in codigos) {
      stockMap[codigo] = 0;
    }
    final listaCodigos = codigos.take(10).toList();

    if (listaCodigos.isEmpty) {
      // Maneja caso vacío
      return {};
    }
    final historialSnapshot =
        await FirebaseFirestore.instance
            .collection('historial_inventario_general')
            .where('codigo', whereIn: codigos.take(10).toList())
            .get();

    for (var doc in historialSnapshot.docs) {
      final data = doc.data();
      final codigo = data['codigo']?.toString() ?? '';
      final tipo = (data['tipo'] ?? 'entrada').toString();
      final cantidad = (data['cantidad'] ?? 0) as int;

      if (stockMap.containsKey(codigo)) {
        if (tipo == 'salida') {
          stockMap[codigo] = stockMap[codigo]! - cantidad;
        } else {
          stockMap[codigo] = stockMap[codigo]! + cantidad;
        }
      }
    }

    final ventasSnapshot =
        await FirebaseFirestore.instance.collection('ventas').get();

    for (var venta in ventasSnapshot.docs) {
      final productos = List<Map<String, dynamic>>.from(venta['productos']);
      for (var producto in productos) {
        final codigo = producto['codigo']?.toString() ?? '';
        final cantidadVendida = (producto['cantidad'] ?? 0) as int;

        if (stockMap.containsKey(codigo)) {
          stockMap[codigo] = stockMap[codigo]! - cantidadVendida;
        }
      }
    }

    return stockMap;
  }

    List<String> colecciones = [
      'inventario_general',
      'inventario_fundicion',
      'inventario_pintura',
      'historial_inventario_general',
    ];

    for (String col in colecciones) {
      QuerySnapshot snapshot =
          await _firestore
              .collection(col)
              .where('nombre', isEqualTo: nombre)
              .get();

      for (var doc in snapshot.docs) {
        await _firestore.collection(col).doc(doc.id).delete();
      }
    }
  }

  void agregarProductoDesdeEscaneo(String codigo) async {
    final resultado = await Navigator.push(
      context,
      MaterialPageRoute(
        builder:
            (context) => EditarProductoScreen(
              codigoBarras: codigo,
              nombreInicial: '',
              precioInicial: 0,
            ),
      ),
    );

    if (resultado != null) {
      await _firestore
          .collection('inventario_general')
          .doc(resultado['codigo'])
          .set({
            'codigo': resultado['codigo'],
            'nombre': resultado['nombre'],
            'precio': resultado['precio'],
            'categoria': resultado['categoria'],
            'fecha_creacion': Timestamp.now(),
            'estado': 'en_proceso',
          });
    }
  }

  void agregarProductoManual() async {
    final resultado = await Navigator.push(
      context,
      MaterialPageRoute(
        builder:
            (context) => EditarProductoScreen(
              codigoBarras: '',
              nombreInicial: '',
              precioInicial: 0,
            ),
      ),
    );

    if (resultado != null) {
      await _firestore
          .collection('inventario_general')
          .doc(resultado['codigo'])
          .set({
            'codigo': resultado['codigo'],
            'nombre': resultado['nombre'],
            'precio': resultado['precio'],
            'categoria': resultado['categoria'],
            'fecha_creacion': Timestamp.now(),
            'estado': 'en_proceso',
          });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFD6EAF8),
      body: SafeArea(
        child: Column(
          children: [
            // Encabezado
            Container(
              width: double.infinity,
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF4682B4), Color(0xFF4682B4)],
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                ),
                borderRadius: BorderRadius.only(
                  bottomLeft: Radius.circular(30),
                  bottomRight: Radius.circular(30),
                ),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
              child: const Center(
                child: Text(
                  'Productos',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 22,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),

            // Barra de búsqueda + iconos
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _searchController,
                      decoration: InputDecoration(
                        hintText: 'Buscar por nombre, código o referencia...',
                        prefixIcon: const Icon(Icons.search),
                        filled: true,
                        fillColor: const Color.fromARGB(255, 255, 255, 255),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide.none,
                        ),
                      ),
                      onChanged: (value) {
                        setState(() {
                          searchQuery = value;
                        });
                      },
                    ),
                  ),
                  const SizedBox(width: 8),
                  Material(
                    color: Colors.white,
                    elevation: 0,
                    shape: const CircleBorder(),
                    child: IconButton(
                      icon: const Icon(
                        Icons.add,
                        size: 38,
                        color: Colors.black87,
                      ),
                      onPressed: agregarProductoManual,
                    ),
                  ),
                  ScanInv(onCodigoEscaneado: agregarProductoDesdeEscaneo),
                  const SizedBox(width: 0),
                  // Botón de importar CSV
                  Material(
                    color: const Color.fromARGB(255, 255, 255, 255),
                    elevation: 0,
                    shape: const CircleBorder(),
                    child: IconButton(
                      icon: const Icon(
                        Icons.file_upload,
                        size: 38,
                        color: Color.fromARGB(255, 0, 0, 0),
                      ),
                      tooltip: 'Importar CSV',
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder:
                                (context) => const ImportarProductosScreen(),
                          ),
                        );
                      },
                    ),
                  ),
                  const SizedBox(width: 8),
                ],
              ),
            ),

           

           